<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); 

class Match_validator
{
    private $LOL_GAME_MODE_CLASSIC = 'CLASSIC';
    private $LOL_GAME_MODE_CLASSIC_SIZE = 10;

	public function __construct()
	{
		$this->load->model('riotapi_model');
        $this->load->model('league_model');
        $this->load->model('team_model');
        $this->load->model('match_model');
    }

    public function match_complete($matchid, $esportid)
    {
        $match = $this->match_model->get_match_by_matchid($matchid, $esportid);
        if($match)
        {
            $teama = $this->team_model->get_team_by_teamid($match['teamaid'], $esportid);
            $teamb = $this->team_model->get_team_by_teamid($match['teambid'], $esportid);
            $players = array_merge($teama['roster'], $teamb['roster']);
            switch ($esportid) {
                case '1':
                    //League of Legends
                    foreach($players as $player)
                    {
                        $recent_games = $this->riotapi_model->getRecentGames($player['summonerid']);
                        foreach ($recent_games as $game)
                        {
                            $matched_players = array();
                            $player_num = $this->_get_lol_player_num($game);
                            $fellow_players = $game['fellowPlayers'];
                            foreach ($fellow_players as $fellow_player)
                            {
                                if($this->_has_player($players,$fellow_player['summonerId']))
                                {
                                    array_push($matched_players, $fellow_player['summonerId']);   
                                }

                                if(count($matched_players) == $player_num)
                                { 
                                    return array_push($matched_players, $player['summonerid']);
                                }
                            }
                        }
                    }
                    return array();
                    break;
                
                default:
                    # code...
                    break;
            }
        }
        else
        {
            return FALSE;
        }
        
    }

    private function _get_lol_player_num($game)
    {
        switch ($game['gameMode']) {

            case $this->LOL_GAME_MODE_CLASSIC:
                return $this->LOL_GAME_MODE_CLASSIC_SIZE;
            
            default:
                return 100;
        }
    }

    private function _has_player($players, $player_id)
    {
        return in_array($player_id, $players);
    }


}
